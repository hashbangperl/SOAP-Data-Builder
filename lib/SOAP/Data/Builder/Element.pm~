package SOAP::Data::Builder::Element;
# Copyright (c) 2003 Surrey Technologies, Ltd ( http://www.surreytech.co.uk )

# This Module provides a quick and easy way to build complex SOAP data
# and header structures for use with SOAP::Lite, managed by SOAP::Data::Builder.

=head1 NAME

  SOAP::Data::Builder::Entity - A simple wrapper SOAP::Data

=head1 DESCRIPTION

  This Module provides a quick and easy way to build complex SOAP data
  and header structures for use with SOAP::Lite, managed by SOAP::Data::Builder.

=cut

use Data::Dumper;
use strict;

=head1 METHODS

=head2 new(autotype=>0)

Constructor method for this class, it instantiates and returns the entity object,
taking value and attributes as named parameters

my $entity = SOAP::Data::Builder::Entity->new( name=> 'anExample', VALUE=> 'foo', attributes => { 'ns1:foo' => 'bar'});

optional parameters are : value, attributes, header, isMethod

parent should be an element fetched using get_elem

value should be a string, to add child nodes use add_elem(parent=>get_elem('name/of/parent'), .. )

attributes should be a hashref : { 'ns:foo'=> bar, .. }

header should be 1 or 0 specifying whether the element should be built using SOAP::Data or SOAP::Header

=cut

sub new {
    my ($class,%args) = @_;
    my $self = {};
    bless ($self,ref $class || $class);
    foreach my $key (keys %args) {
      $self->{$key} = $args{$key} || 0;
    }
    $self->{fullname} = "$args{parent}/$args{name}" if ($args{parent});
    $self->{VALUE} = [ $args{value} ];
    return $self;
}

sub value {
    my $self = shift;
    my $value = shift;
    if ($value) {
	if (ref $value) {
	    $self->{VALUE} = $value;
	} else {
	    $self->{VALUE} = [$value];
	}
    } else {
	$value = $self->{VALUE};
    }
    return $value;
}

sub name {
    my $self = shift;
    my $value = shift;
    if ($value) {
	$self->{name} = $value;
    } else {
	$value = $self->{name};
    }
    return $value;
}

sub fullname {
    my $self = shift;
    return $self->{fullname} || $self->{name};
}

sub attributes {
    my $self = shift;
    if (wantarray) {
	return %{$self->{attributes}};
    } else {
	return $self->{attributes};
    }
}

sub remove_attribute {
    my ($self, $attribute) = @_;
    my $success = 0;
    if ($self->{attributes}{$attribute}) {
	delete $self->{attributes}{$attribute};
	$success++;
    }
    return $success;
}

sub set_attribute {
    my ($self, $attribute, $value) = @_;
    $self->{attributes}{$attribute} = $value;
    return 1;
}

sub get_attribute {
    my ($self, $attribute) = @_;
    return $self->{attributes}{$attribute};
}

=head1 add_elem($elem)

This method adds an element as a child to another element.

Accepts only one argument : the element to be added.

=cut

sub add_elem {
    my ($self,$elem) = @_;
    push(@{$self->{VALUE}},$elem);
    return $elem;
}


sub get_children {
    my $self = shift;
    my @children = shift;
    foreach my $value (@{$self->value}) {
	push (@children, $value ) if ref $value;
    }
    if (wantarray) {
	return @children;
    } else {
	return \@children;
    }
}

# soap data method

sub get_as_data {
  my $self = shift;
  warn "-- sub : get_as_data called in $self->{name}\n";
  my @values;
  foreach my $value ( @{$self->{VALUE}} ) {
    warn "-- -- value : $value ";
    if (ref $value) {
      warn " ..is ref\n";
      push(@values,$value->get_as_data())
    } else {
      warn " ..is scalar\n";
      push(@values,$value);
    }
  }

  my @data = ();

  warn "\n##################\n values : \n ";
  warn Dumper(@values);
  warn "\n##################\n ";

  if (ref $values[0]) {
    $data[0] = \SOAP::Data->value( @values );
  } else {
    @data = @values;
  }

  if ($self->{header}) {
    $data[0] = SOAP::Header->name($self->{name} => $data[0])->attr($self->{attributes});
  } else {
    if ($self->{isMethod}) {
      @data = ( SOAP::Data->name($self->{name} )->attr($self->{attributes}) => SOAP::Data->value( @values ) );
    } else {
      $data[0] = SOAP::Data->name($self->{name} => $data[0])->attr($self->{attributes});
    }
  }

  return @data;
}


1;
